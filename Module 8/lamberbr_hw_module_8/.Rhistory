ggplot() +
geom_point(aes(x=age.yrs,y=ht.in,color=ind.Male),data=fev_DF) +
theme_minimal()
ggplot() +
geom_point(aes(x=age.yrs,y=ht.in,color=ind.Male),data=fev_DF)
fev_DF <- fev_DF %>%
mutate(gender = ifelse(ind.Male==0,"Female","Male"))
ggplot() +
geom_point(aes(x=age.yrs,y=ht.in,color=gender),data=fev_DF)
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),data=fev_DF)
input <- list(xvar="age.yrs", yvar="ht.in", color_gender=TRUE)
if(input$color_gender) {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
} else {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
if(input$color_gender) {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
print("plot 1")
} else {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
library(shiny)
library(tidyverse)
ui <- fluidPage(
# Application title
titlePanel(title = "My Shiny App Name Here!"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
),
# Main panel typically used to display outputs
mainPanel(
)
)
)
server <- function(input, output) {
}
shinyApp(ui=ui, server=server)
library(shiny)
library(tidyverse)
fev_DF <- read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header=T)
fev_DF <- fev_DF %>%
mutate(gender = ifelse(ind.Male==0,"Female","Male"))
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "xvar", label= "Select an x-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
selectInput(inputId = "yvar", label= "Select an y-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
checkboxInput(inputId= "color_gender", label = "Color by Gender")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "xvar", label= "Select an x-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
selectInput(inputId = "yvar", label= "Select an y-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
checkboxInput(inputId= "color_gender", label = "Color by Gender")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
output$myscatterplot <-
renderPlot({
if(input$color_gender) {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
} else {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
})
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "xvar", label= "Select an x-variable",
choices = c("fev.L", "age.yrs", "ht.in")),
selectInput(inputId = "yvar", label= "Select an y-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
checkboxInput(inputId= "color_gender", label = "Color by Gender")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
output$myscatterplot <-
renderPlot({
if(input$color_gender) {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
} else {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
})
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "xvar", label= "Select an x-variable",
choices = c("age.yrs", "fev.L", "ht.in"),
selected = "fev.L"),
selectInput(inputId = "yvar", label= "Select an y-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
checkboxInput(inputId= "color_gender", label = "Color by Gender")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
output$myscatterplot <-
renderPlot({
if(input$color_gender) {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
} else {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
})
}
shinyApp(ui=ui, server=server)
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "xvar", label= "Select an x-variable",
choices = c("Age (years)" = "age.yrs",
"FEV (L)" = "fev.L",
"Height(in)" = "ht.in"),
selected = "fev.L"),
selectInput(inputId = "yvar", label= "Select an y-variable",
choices = c("age.yrs", "fev.L", "ht.in")),
checkboxInput(inputId= "color_gender", label = "Color by Gender")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
output$myscatterplot <-
renderPlot({
if(input$color_gender) {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
} else {
ggplot() +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
})
}
shinyApp(ui=ui, server=server)
library(shiny)
library(tidyverse)
varnames <- c("Age (years)" = "age.yrs",
"FEV (L)" = "fev.L",
"Height (in)" = "ht.in")
fev_DF <- read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header=T)
fev_DF <- fev_DF %>%
mutate(gender = ifelse(ind.Male==0,"Female","Male"))
table(cut(fev_DF$age.yrs, breaks=c(2,8,10,12,19)))
runApp('Downloads/app4.R')
saveRDS("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", "fev.rds")
data = read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header = T)
save(data, file = "fev.RData")
data = read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header = T)
fev = read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header = T)
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
View(fev)
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
View(fev_DF)
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
shiny::runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
runApp('Desktop/STA404/Module 8/lamberbr_hw_module_8')
save(fev, file = "fev.RData")
library(shiny)
library(tidyverse)
fev = read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header = T)
save(fev, file = "fev.RData")
setwd("Users/brianlambert/Desktop/STA404/Module 8/lamberbr_hw_module_8")
setwd("Users/brianlambert/Desktop/STA404/Module 8/lamberbr_hw_module_8")
setwd("/Users/brianlambert/Desktop/STA404/Module 8/lamberbr_hw_module_8")
library(shiny)
library(tidyverse)
fev = load("fev.RData")
runApp()
setwd("/Users/brianlambert/Desktop/STA404/Module 8/lamberbr_hw_module_8")
library(shiny)
library(tidyverse)
fev = load("fev.RData")
varnames <- c("Age (years)" = "age.yrs",
"FEV (L)" = "fev.L",
"Height (in)" = "ht.in")
fev_DF <- read.table("/Users/brianlambert/Desktop/STA404/Module 8/fev_data copy.txt", header=T)
fev_DF <- fev_DF %>%
mutate(gender = ifelse(ind.Male==0,"Female","Male"))
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "yvar", label= "Select an y-variable",
choices = varnames),
# selectInput(inputId = "xvar", label= "Select an x-variable",
#             choices = varnames),
uiOutput(outputId = "xvar"),
selectInput(inputId = "gender", label= "Choose Gender to Display",
choices = c("Both", "Females Only", "Males Only"),
selected = "Both"),
checkboxInput(inputId= "color_gender", label = "Color by Gender"),
checkboxInput(inputId= "smooth", label = "Add LOESS Smooth Curve"),
checkboxInput(inputId= "jitter", label = "Add Jittering")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
output$xvar <- renderUI({
xvarsubset <- varnames[varnames!=input$yvar]
selectInput(inputId = "xvar",
label = "Select an X-variable",
choices = xvarsubset)
})
output$myscatterplot <-
renderPlot({
p1 <- ggplot() +
labs(x=names(varnames)[varnames==input$xvar],
y=names(varnames)[varnames==input$yvar],
title(paste("Scatterplot of ",input$yvar,"by",input$xvar))) +
theme_bw()
if(input$gender == "Females Only") {
fev_DF = fev_DF[fev_DF$ind.Male==0,]
}
if(input$gender == "Males Only") {
fev_DF = fev_DF[fev_DF$ind.Male==1,]
}
if(input$gender == "Both" & input$color_gender) {
p1 = p1 +
geom_point(aes_string(x=input$xvar,y=input$yvar,color="gender"),
data=fev_DF)
}
else {
p1 = p1 +
geom_point(aes_string(x=input$xvar,y=input$yvar),data=fev_DF)
}
if (input$smooth){
p1 = p1 +
geom_smooth(aes_string(x=input$xvar,y=input$yvar),data=fev_DF, method = "loess", se=FALSE)
}
if (input$smooth & input$color_gender){
p1 = p1 +
geom_smooth(aes_string(x=input$xvar,y=input$yvar, col="gender"),
data=fev_DF,
method = "loess",
se=FALSE)
}
if (input$jitter){
p1 = p1 +
geom_jitter(aes_string(x=input$xvar,y=input$yvar),data=fev_DF, method = "loess", se=FALSE)
}
p1
}
)
}
shinyApp(ui=ui, server=server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
library(shiny)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggthemes)
basic_demographics = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Basic demographics fall 17 ftft Oxford.csv", header = T)
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AP"] <- "CEC"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AS"] <- "CAS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="BU"] <- "FSB"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="EA"] <- "EHS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="FA"] <- "CCA"
basic_demographics$Division <- fct_infreq(basic_demographics$Division)
basic_demographics <- basic_demographics %>%
mutate(order_minority = factor(Minority.Status,
levels=c("Domestic Minority", "International", "Domestic Nonminority")))
ui <- fluidPage(
# Application title
titlePanel(title = "FEV Scatterplot Explorer"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
checkboxInput(inputId= "facet_gender", label = "Facet by Gender")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
output$myscatterplot <-
renderPlot({
# bar chart of divisons chosen, order by minority, faceted by gender
plot <- ggplot(basic_demographics, aes(x = as.factor(Division), fill = order_minority)) +
geom_bar(position = "dodge") +
labs(x="College Division") +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
scale_fill_manual(name = 'order minority',
values =c("#BDBDBD", "#455A64", "#F44336"))
if(input$facet_gender) {
plot = plot +
facet_wrap(~Gender)
}
}
)
}
shinyApp(ui=ui, server=server)
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
# ###############################################################
#                                                               #
# Author: Brian Lambert, Minyue Wang, Mary Yu                   #
# Name: app.R                                       #
# Description: Displays to present to Miami University Admins   #
# to explore the incoming class of 2021                         #
#                                                               #
# setwd(“/Users/brianlambert/Desktop/STA404/krallman”)          #
#                                                               #
#################################################################
library(gridExtra)
library(tidyverse)
library(gapminder)
library(ggplot2)
library(forcats)
library(dplyr)
library(maps)
library(ggplot2)
library(ggmap)
library(mapproj)
library(ggthemes)
library(mapdata)
library(rworldmap)
library(choroplethr)
#========================== Data ==========================
basic_demographics = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Basic demographics fall 17 ftft Oxford.csv", header = T)
act_composites = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/ACT Composite Test score dummy id.csv", header = T)
courses_enrolled = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Courses enrolled 15th day - dummy id.csv", header = T)
hs_rank_type= read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/HS percentile rank and hs type.csv", header = T)
legacy= read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Legacy dummy id.csv", header = T)
financial_need= read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Level of financial need dummy id.csv", header = T)
parental_education = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Parental education dummy id.csv", header = T)
countdata2 = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/countdata2.csv", header = T)
#========================== Graphics ==========================
# rename divisons to more commmon naming protocols
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AP"] <- "CEC"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AS"] <- "CAS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="BU"] <- "FSB"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="EA"] <- "EHS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="FA"] <- "CCA"
basic_demographics$Division <- fct_infreq(basic_demographics$Division)
basic_demographics <- basic_demographics %>%
mutate(order_minority = factor(Minority.Status,
levels=c("Domestic Minority", "International", "Domestic Nonminority")))
# bar chart of divisions chosen, ordered by minority
g1 <- ggplot(basic_demographics, aes(x = as.factor(Division), fill = order_minority)) +
geom_bar() +
labs(x="College Division") +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
scale_fill_manual(name = 'Minority Status',
values =c("#BDBDBD", "#455A64", "#F44336"))
basic_demographics <- basic_demographics %>%
mutate(Gender = ifelse(Gender=="M","Male","Female"))
# bar chart of divisons chosen, order by minority, faceted by gender
g2 <- ggplot(basic_demographics, aes(x = as.factor(Division), fill = order_minority)) +
geom_bar(position = "dodge") +
facet_wrap(~Gender) +
labs(x="College Division") +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
scale_fill_manual(name = 'order minority',
values =c("#BDBDBD", "#455A64", "#F44336"))
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('~/Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
