theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none")
combined_raw %>% gather(test, value, -year)
combined_raw = raw_data %>% gather(test, value, -year)
View(combined_raw)
shiny::runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
basic_demographics = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Basic demographics fall 17 ftft Oxford.csv", header = T)
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AP"] <- "CEC"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AS"] <- "CAS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="BU"] <- "FSB"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="EA"] <- "EHS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="FA"] <- "CCA"
basic_demographics$Division <- fct_infreq(basic_demographics$Division)
basic_demographics <- basic_demographics %>%
mutate(status = factor(Minority.Status,
levels=c("Domestic Nonminority", "Domestic Minority", "International")))
basic_demographics <- basic_demographics %>%
mutate(Gender = ifelse(Gender=="M","Male","Female"))
min_status = list("Domestic Nonminority", "Domestic Minority", "International")
View(basic_demographics)
min_status = list("Domestic Nonminority", "Domestic Minority", "International")
typeof(min_status)
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
basic_demographics$status
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
setwd("/Users/brianlambert/Desktop/STA404/krallman/shiny")
shiny::runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
library(gridExtra)
library(tidyverse)
library(gapminder)
library(ggplot2)
library(forcats)
library(dplyr)
library(maps)
library(ggplot2)
library(ggmap)
library(mapproj)
library(ggthemes)
library(mapdata)
library(rworldmap)
library(choroplethr)
basic_demographics = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Basic demographics fall 17 ftft Oxford.csv", header = T)
act_composites = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/ACT Composite Test score dummy id.csv", header = T)
courses_enrolled = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Courses enrolled 15th day - dummy id.csv", header = T)
hs_rank_type= read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/HS percentile rank and hs type.csv", header = T)
legacy= read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Legacy dummy id.csv", header = T)
financial_need= read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Level of financial need dummy id.csv", header = T)
parental_education = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/Parental education dummy id.csv", header = T)
countdata2 = read.csv("/Users/brianlambert/Desktop/STA404/Krallman/data/countdata2.csv", header = T)
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AP"] <- "CEC"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="AS"] <- "CAS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="BU"] <- "FSB"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="EA"] <- "EHS"
levels(basic_demographics$Division)[levels(basic_demographics$Division)=="FA"] <- "CCA"
basic_demographics$Division <- fct_infreq(basic_demographics$Division)
basic_demographics <- basic_demographics %>%
mutate(order_minority = factor(Minority.Status,
levels=c("Domestic Minority", "International", "Domestic Nonminority")))
g1 <- ggplot(basic_demographics, aes(x = as.factor(Division), fill = order_minority)) +
geom_bar() +
labs(x="College Division") +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
scale_fill_manual(name = 'Minority Status',
values =c("#BDBDBD", "#455A64", "#F44336"))
basic_demographics <- basic_demographics %>%
mutate(Gender = ifelse(Gender=="M","Male","Female"))
g2 <- ggplot(basic_demographics, aes(x = as.factor(Division), fill = order_minority)) +
geom_bar(position = "dodge") +
facet_wrap(~Gender) +
labs(x="College Division") +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
scale_fill_manual(name = 'order minority',
values =c("#BDBDBD", "#455A64", "#F44336"))
business_courses = c("BUS", "ECO", "ACC", "MKT", "MGT", "ISA", "CMR", "ESP")
stem_courses = c("GLG", "MTH", "CHM", "BIO", "PMD", "CEC", "PHY", "MME", "STA", "CSE",
"MBI", "MSC", "IES", "NSC", "AES", "CPB", "ECE", "IMS")
humanities_socialScience_courses = c("GEO", "SPN", "ENG", "WST", "UNV", "HST", "JRN", "POL",
"FRE", "BWS", "ATH", "GER", "CAS", "PHL", "SOC",
"GTY", "ARB", "ITS", "PSY", "JPN", "GIC",
"SPA", "WGS", "LAT", "IDS", "CHI", "KOR", "ITL",
"REL", "LAS", "DST", "RUS", "STC", "PLW", "SJS", "ACE",
"HBW", "AAA", "POR", "GRK", "MAC", "FST", "CLS", "AMS")
art_courses = c("ART","MUS","THE","ARC", "CCA")
art_courses = c("ART","MUS","THE","ARC", "CCA")
art_courses = c("ART","MUS","THE","ARC", "CCA")
art_courses = c("ART","MUS","THE","ARC", "CCA")
education_courses = c("EDL", "EDT", "KNH", "EDP", "FSW")
course_group = c()
for (c in courses_enrolled$SUBJ_CODE){
c = as.character(c)
group = ''
if(c %in% business_courses){
group = "Business"
}
else if(c %in% stem_courses){
group = "STEM"
}
else if(c %in% art_courses){
group = "Art"
}
else if(c %in% education_courses){
group = "Education"
}
else {
group = "Humanities & Social Science"
}
course_group = append(course_group, group)
}
new_courses_enrolled = data.frame(courses_enrolled, course_group)
newtable = merge(new_courses_enrolled, basic_demographics, by = "Dummy.ID")
newtable$course_group<-factor(newtable$course_group,
levels = c("STEM","Humanities & Social Science", "Business","Art","Education"))
newtable <- newtable %>%
mutate(order_minority = factor(Minority.Status,
levels=c("Domestic Minority", "International", "Domestic Nonminority")))
g3 <- ggplot(newtable, aes(x = as.factor(course_group), fill = order_minority)) +
geom_bar() +
labs(x="Course Type") +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none") +
scale_fill_manual(name = 'order minority',
values =c("#BDBDBD", "#455A64", "#F44336"))
table(unlist(basic_demographics$order_minority))
state_map <- map_data("state")
str(state_map)
unique(state_map$region)
ggplot(state_map, aes(x=long,y=lat,group=group))+
geom_polygon(fill="white", colour="black")
mw_map <- map_data("state", region=c("alabama","arizona","arkansas","california","colorado",
"connecticut","delaware","district of columbia",
"florida","georgia","idaho","illinois",
"indiana","iowa","kansas","kentucky",
"louisiana","maine","maryland","massachusetts",
"michigan","minnesota","mississippi","missouri",
"montana","nebraska","nevada","new hampshire",
"new jersey","new mexico","new york","north carolina",
"north dakota","ohio","oklahoma","oregon",
"pennsylvania","rhode island","south carolina","south dakota",
"tennessee","texas","utah","vermont",
"virginia","washington","west virginia","wisconsin",
"wyoming"))
shiny::runApp('Desktop/STA404/Krallman/lamberbr_Krallman_shiny')
library(shiny); runApp('Desktop/STA404/Health2/shiny/shiny_pha.R')
load("/Users/brianlambert/Downloads/tadpoleUV.RData")
atttach(tadUV)
attach(tadUV)
fit <-glm(Survived ~ UV.Level, data=tadUV, family=binomial)
summary(fit)
exp(coef(fit)[2])
null.model <-glm(Survived ~ 1, data=tadUV, family=binomial
null.model <-glm(Survived ~ 1, data=tadUV, family=binomial)
anova(null.model, fit, test="Chisq")
predict(fit, newdata=data.frame(UV.Level=40), type="response")
predict(fit,newdata=data.frame(UV.Level=75), type="response")
fit <-glm(Survived ~ UV.Level, data=tadUV, family=binomial)
predict(fit, newdata=data.frame(UV.Level=40), type="response")
predict(fit, newdata=data.frame(UV.Level=40), type="response")
fit <-glm(Survived ~ UV.Level, data=tadUV, family=binomial)
summary(fit)
exp(coef(fit)[2])
exp(confint(fit))-1
fit <-glm(Survived ~ UV.Level, data=tadUV, family=binomial)
null.model <-glm(Survived ~ 1, data=tadUV, family=binomial)
anova(null.model, fit, test="Chisq")
predict(fit, newdata=data.frame(UV.Level=40), type="response")
load("/Users/brianlambert/Downloads/contraceptiveuse.RData")
attach(contraceptiveuse)
View(contraceptiveuse)
bind = cbind(notUsing, using)
View(bind)
lrfit = glm(bind ~ age + education + wantsMore, family = binomial)
summary(lrfit)
noMore <-wantsMore == "no"
hiEduc <-education == "high"
lrfit2 <-glm(bind ~ age + hiEduc + noMore, family=binomial)
summary(lrfit2)
nullmodel <-glm( bind ~ 1, family=binomial)
anova(nullmodel, lrfit2, test="Chisq")anova(nullmodel, lrfit2, test="Chisq")
anova(nullmodel, lrfit2, test="Chisq")
exp(coef(lrfit2))
exp(coef(lrfit2))-1
exp(confint(lrfit2))
library(shiny); runApp('Desktop/STA404/Health2/shiny/shiny_pha.R')
runApp('Desktop/STA404/Health2/shiny/shiny_pha.R')
runApp('Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('Desktop/STA404/Health2/shiny/shiny_pha.R')
runApp('Desktop/STA404/Health2/shiny/shiny_pha.R')
library(shiny); runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
library(shiny); runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
runApp('Desktop/STA404/Health2/shiny_dashboard.R')
setwd("/Users/brianlambert/Desktop/STA404/health2/data")
library(tidyverse)
library(forcats)
library(dplyr)
library(gdata)
raw_data_2011 = read.xls("2011 - 2016 Raw Data.xlsx", sheet=2, header=T)
raw_data_2011$year = 2011
raw_data_2012 = read.xls("2011 - 2016 Raw Data.xlsx", sheet=3, header=T)
raw_data_2012$year = 2012
myvars <- names(raw_data_2012) %in% c("X", "X.1")
raw_data_2012 = raw_data_2012[!myvars]
raw_data_2013 = read.xls("2011 - 2016 Raw Data.xlsx", sheet=4, header=T)
raw_data_2013$year = 2013
raw_data_2014 = read.xls("2011 - 2016 Raw Data.xlsx", sheet=5, header=T)
raw_data_2014$year = 2014
raw_data_2015 = read.xls("2011 - 2016 Raw Data.xlsx", sheet=6, header=T)
raw_data_2015$year = 2015
raw_data_2016 = read.xls("2011 - 2016 Raw Data.xlsx", sheet=7, header=T)
raw_data_2016$year = 2016
raw_data = rbind(raw_data_2011, raw_data_2012, raw_data_2013, raw_data_2014, raw_data_2015, raw_data_2016)
raw_gathered = raw_data %>% gather(test, value, -year)
name_vec = c("PSC","PSB","PSCO")
raw_data$PSC[raw_data$PSC == 1] = "Participated"
raw_data$PSC[raw_data$PSC == 0] = "Did Not Participate"
raw_data$PSB[raw_data$PSB == 1] = "Participated"
raw_data$PSB[raw_data$PSB == 0] = "Did Not Participate"
raw_data$PSCO[raw_data$PSCO == 1] = "Participated"
raw_data$PSCO[raw_data$PSCO == 0] = "Did Not Participate"
raw_data$PSC<-factor(raw_data$PSC,levels = c("Did Not Participate","Not Required","Participated"))
raw_data$PSB<-factor(raw_data$PSB,levels = c("Did Not Participate","Not Required","Participated"))
raw_data$PSCO<-factor(raw_data$PSCO,levels = c("Did Not Participate","Not Required","Participated"))
save(raw_data, file="raw_data.RData")
save(raw_gathered, file="raw_gathered.RData")
library(shiny); runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
View(raw_data)
View(raw_gathered)
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
table(unlist(raw_data))
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
l <- list(a = 1,b = "foo",c = 1:5)
l['c']
l['a']
typeof(l['a'])
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
l <- list(a = 1,b = "foo",c = 1:5)
typeof(l['a'][1])
l['a'][1]
l[['a']]
typeof(l[['a']])
occurences[2011]
occurences = table(unlist(raw_data))
occurences[2011]
occurences["2011"]
occurences
runApp('~/Desktop/STA404/Health2/shiny/shiny_screening.R')
setwd("/Users/brianlambert/Desktop/STA404/Health2")
library(shiny)
library(tidyverse)
library(ggplot2)
library(forcats)
library(dplyr)
library(ggthemes)
library(plotly)
library(gdata)
load("data/raw_data.RData")
load("data/raw_gathered.RData")
ui <- fluidPage(
# Application title
titlePanel(title = "Health2 Shiny App"),
sidebarLayout(
# Sidebar typically used to house input controls
sidebarPanel(
selectInput(inputId = "testId",
label = "Select Screening / Participation to Display",
choices=c("PSC","PSB","PSCO"),
selected="PSC")
),
# Main panel typically used to display outputs
mainPanel(
plotOutput(outputId = "myscatterplot")
)
)
)
server <- function(input, output) {
# get counts of participants each year for geom bar width
occurences = table(unlist(raw_data))
output$myscatterplot <-
renderPlot({
cancer_type = NULL
if(input$testId == "PSC"){
cancer_type = "Cervical"
}
else if(input$testId == "PSB"){
cancer_type = "Breast"
}
else {
cancer_type = "Colon"
}
# stacked bar chart for PSB participation by year
p = ggplot(raw_data,aes(x=factor(year), fill=raw_data[,input$testId])) +
geom_bar(position = "fill", width = occurences[[toString(year)]]) +
labs(x="Year",y=paste(cancer_type,"Screening Count")) +
ggtitle(paste(cancer_type, "Cancer Screening Participants by Year")) +
guides(fill=guide_legend(title="Participation Status")) +
theme(plot.title = element_text(hjust = 0.5),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank())
p
# give top margin so title doesn't overlap ggplotly menu. Clean up ggplotly menu options
# source: https://stackoverflow.com/questions/42821171/fix-plotly-ggplotly-title-overlapping-plot-when-title-is-split-on-two-lines
# gp <- ggplotly() %>% config(collaborate=FALSE, cloud=FALSE, displaylogo=FALSE, modeBarButtonsToRemove=c("select2d", "sendDataToCloud", "pan2d", "resetScale2d", "hoverClosestCartesian", "hoverCompareCartesian", "lasso2d", "zoomIn2d", "zoomOut2d"))
# gp <- layout(gp, margin=list(t = 70))
}
)
}
shinyApp(ui=ui, server=server)
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
occurences = table(unlist(raw_data))
occurences
runApp('shiny/shiny_screening.R')
occurences[[toString(year)]]/4644
occurences[[toString(2011)]]/4644
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
occurences[[toString(year)]]/4644
summary(raw_data)
str(raw_data)
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
rep(12)
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
occurences = table(unlist(raw_data))
occurences
raw_data[1, "year"]
typeof(raw_data[1, "year"])
raw_data$size = 0
for (i in 1:nrow(raw_data)) {
year_size = 0
if(raw_data[i, "year"] == 2011) {
year_size = 4554
} else if(raw_data[i, "year"] == 2012) {
year_size = 4644
} else if(raw_data[i, "year"] == 2013) {
year_size = 3403
} else if(raw_data[i, "year"] == 2014) {
year_size = 3377
} else if(raw_data[i, "year"] == 2015) {
year_size = 3530
} else {
year_size = 3664
}
raw_data$size[i] = year_size / 4644
}
View(raw_data)
runApp('shiny/shiny_screening.R')
print(raw_data[1, "year"] == 2011)
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
occurences
runApp('shiny/shiny_screening.R')
raw_data$size = 0
for (i in 1:nrow(raw_data)) {
year_size = 0
if(raw_data[i, "year"] == 2011) {
year_size = 4554
} else if(raw_data[i, "year"] == 2012) {
year_size = 4644
} else if(raw_data[i, "year"] == 2013) {
year_size = 3403
} else if(raw_data[i, "year"] == 2014) {
year_size = 3377
} else if(raw_data[i, "year"] == 2015) {
year_size = 3530
} else {
year_size = 3664
}
raw_data$size[i] = year_size
}
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
runApp('shiny/shiny_screening.R')
